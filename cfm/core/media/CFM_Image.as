package cfm.core.media{	import cfm.core.containers.CFM_ObjectContainer;	import cfm.core.events.CFM_ImageEvent;	import cfm.core.interfaces.media.CFM_IImage;	import cfm.core.managers.CFM_ErrorManager;	import cfm.core.managers.CFM_ImageManager;	import cfm.core.objects.CFM_Object;		import com.greensock.OverwriteManager;	import com.greensock.TweenMax;	import com.greensock.easing.Linear;		import flash.display.Bitmap;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;
		[Event(name="complete", type="com.cfm.core.events.CFM_ImageEvent")]	[Event(name="loaderProgress", type="com.cfm.core.events.CFM_ImageEvent")]		public class CFM_Image extends CFM_Object implements CFM_IImage	{		protected var maxWidth						:Number;		protected var maxHeight						:Number;		protected var loadPercent					:Number;		protected var domain						:String;		protected var tweenIn						:Boolean;		protected var currentScale					:Number = 1;				protected var loader						:Loader;		protected var container						:CFM_ObjectContainer;				protected var __index						:Number;		protected var __url							:String;		protected var __loadPolicy					:Boolean;				protected var _loadedBitmap					:Bitmap;				public function CFM_Image(_index:Number, _url:String, _width:Number, _height:Number, _tweenIn:Boolean = true, _loadPolicy:Boolean = false, _autoInit:Boolean = true, _autoDestoy:Boolean = true)		{			super("CFM_Image",_autoInit, _autoDestoy);						__index									= _index;			__url									= _url;			__loadPolicy 							= _loadPolicy;						maxWidth 								= _width;			maxHeight 								= _height;			tweenIn 								= _tweenIn;		}				protected override function build():void{			container = new CFM_ObjectContainer();			container.renderTo(this);						checkForLoadedImage();		}				protected function checkForLoadedImage():void{			if( CFM_ImageManager.isAlreadyLoaded(__url) )				createImage();			else				loadNew();		}				protected function loadNew():void{			if(__loadPolicy)				CFM_ImageManager.loadDomainPolicy(__url);						if(!loader)				loader = new Loader();						if( !loader.contentLoaderInfo.hasEventListener(Event.COMPLETE) ){				loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, CFM_ErrorManager.ioError, false, 0, true);				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loaderComplete, false, 0, true);				loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, loaderProgress, false, 0, true);			}						try{				loader.load( new URLRequest(__url), new LoaderContext( true ) );			}catch(e:Error){				CFM_ErrorManager.reportError(e);			}		}				protected function loaderComplete(e:Event):void{			var bmp:Bitmap = Bitmap(e.target.loader.content);									CFM_ImageManager.LOADED_IMAGES_ARRAY.push({bmp:bmp, url:__url, ar:bmp.width/bmp.height});						killLoader();			createImage();		}				private function killLoader():void{			if(loader && loader.contentLoaderInfo.hasEventListener(Event.COMPLETE)){				loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, CFM_ErrorManager.ioError);				loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaderComplete);				loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, loaderProgress);			}		}				protected function createImage():void{			var bmp:Bitmap = CFM_ImageManager.getLoadedBitmap( __url, maxWidth, maxHeight );			bmp.smoothing = true;			container.addChild(bmp);							_loadedBitmap = bmp;			_loadedBitmap.smoothing = true;						complete();		}				protected function complete():void{			dispatchEvent(new CFM_ImageEvent(CFM_ImageEvent.COMPLETE, __url, _loadedBitmap, 1));			//container.scaleX = container.scaleY = currentScale;			//TweenMax.to(container, tweenIn ? .2 : 0, {scaleX:currentScale, scaleY:currentScale, autoAlpha:1, ease:Linear.easeNone});		}				protected function loaderProgress(e:ProgressEvent):void{			loadPercent = e.bytesLoaded/e.bytesTotal;			dispatchEvent(new CFM_ImageEvent(CFM_ImageEvent.LOADER_PROGRESS, __url, null, loadPercent));		}				public function resize(_width:Number, _height:Number, _delay:Number, _tweenTime:Number, _ease:Object):void{			TweenMax.killDelayedCallsTo(container);						currentScale = _width/maxWidth;									//if(maxHeight*currentScale < _height)				//currentScale = _height/maxHeight;						TweenMax.to(container, _tweenTime, {scaleX:currentScale, scaleY:currentScale, delay:_delay, ease:_ease?_ease:Linear.easeNone});			//container.scaleX = container.scaleY = currentScale;		}				public function newImage(_url:String, _width:Number = NaN, _height:Number = NaN):void{			__url = _url;						if(!isNaN(_width)) maxWidth = _width;			if(!isNaN(_height)) maxHeight = _height;						initNewImage();		}				protected function initNewImage():void{			destroy(null);			checkForLoadedImage();		}				public function killImage():void{			__url = "";			destroy(null);		}				protected override function destroy(e:Event):void{			while(container.numChildren>0){				var c:* = container.getChildAt(0);				container.removeChild(c);				c = null;			}						try {				loader.unload();				loader.close();			} catch (e:Error) {				CFM_ErrorManager.reportError(e);			}								killLoader();			loader = null;						if(e) super.destroy(e);		}				public function get loadedBitmap():Bitmap{return _loadedBitmap;}		public function get url():String{return __url;}		public function get index():Number{return __index};	}}