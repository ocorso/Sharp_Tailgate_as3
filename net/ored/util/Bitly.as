/***************************** Manuel Gonzalez           ** design@stheory.com        ** www.stheory.com           ** www.codingcolor.com       ******************************/package net.ored.util{	import com.adobe.serialization.json.JSON;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		import net.ored.util.out.Out;
	public class Bitly extends Sprite {		private static  var _instance:Bitly;		private var _login:String;		private var _apiKey:String;		private var _url:String;		private var _bitlyApi:String="http://api.bit.ly/shorten?version=2.0.1&longUrl=";		private var _loader:URLLoader;		private var _shortenUrl:String;		public function Bitly(singletonEnforcer:SingletonEnforcer) {		}		/*		 Method: getInstance		 Returns:Bitly 		*/		public static function getInstance():Bitly {			if (_instance == null) {				_instance=new Bitly(new SingletonEnforcer  );			}			return _instance;		}		///////////////////////////////////////// setters & getters ///////////////////////		public function set login(inStr:String):void {			_login=inStr;		}		public function get login():String {			return _login;		}		public function set apiKey(inStr:String):void {			_apiKey=inStr;		}		public function get apiKey():String {			return _apiKey;		}		public function get shortUrl():String {			return _shortenUrl;		}		//////////////////////////////////////////////////////////////////////////////////		/*		 Method:shortenUrl		 Parameters:		 inUrl:String		 Returns: 		 */		public function shortenUrl(inUrl:String):void {			_url=escape(inUrl);			getBitlyURL();		}		/*		 Method:getBitlyURL		 Parameters:		 Returns: 		 */		private function getBitlyURL():void {			var path:String	=_bitlyApi + _url + "&login=" + _login + "&apiKey=" + _apiKey;			_loader			=new URLLoader  ;			configureListeners();			_loader.load(new URLRequest(path));		}		/*		 Method: configureListeners		 Parameters:		 Returns: 		 */		private function configureListeners():void {			_loader.addEventListener(HTTPStatusEvent.HTTP_STATUS,handleBitlyStatus,false, 0, true);			_loader.addEventListener(IOErrorEvent.IO_ERROR,handleBitlyError,false, 0, true);			_loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,handleBitlyError,false, 0, true);			_loader.addEventListener(Event.COMPLETE,handleBitlyComplete,false, 0, true);		}		/*		 Method: removeListeners		 Parameters:		 Returns: 		 */		private function removeListeners():void {			_loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS,handleBitlyStatus);			_loader.removeEventListener(IOErrorEvent.IO_ERROR,handleBitlyError);			_loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,handleBitlyError);			_loader.removeEventListener(Event.COMPLETE,handleBitlyComplete);		}		/*		 Method: handleBitlyComplete		 Parameters:		 event:Event		 Returns: 		*/		private function handleBitlyComplete(event:Event):void {			Out.status(this, "handleBitlyComplete");			removeListeners();			var bitlyObj:Object = JSON.decode(event.target.data);			var url:String		= unescape(_url);			if (bitlyObj.statusCode == "OK") {				Out.debug(this, "OK");				_shortenUrl = bitlyObj.results[url].shortUrl;				var e:Event = new Event(Event.COMPLETE);				dispatchEvent(e);			} else {				trace("ERROR");			}			_loader = null;		}		/*		 Method: handleBitlyStatus		 Parameters:		 event:HTTPStatusEvent		 Returns: 		 */		private function handleBitlyStatus(event:HTTPStatusEvent):void {		//Out.status(this, event);		}		/*		 Method: handleBitlyError		 Parameters:		 event:Event		 Returns: 		 */		private function handleBitlyError(event:Event):void {			Out.error(this,'Getting BITLY url failed with error: ' + event);		}	}}internal class SingletonEnforcer {}